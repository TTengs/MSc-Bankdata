x-spark-common: &spark-common
  image: bitnami/spark:latest
  volumes:
    - ./Airflow/jobs:/opt/bitnami/spark/jobs
    - ./Airflow/spark_jars/db2jcc4.jar:/spark/jars/db2jcc4.jar
    - ./Airflow/spark_jars/db2jcc-db2jcc4.jar:/spark/jars/db2jcc-db2jcc4.jar

  x-airflow-common: &airflow-common
    build:
      context: .
      dockerfile: Dockerfile
    #env_file:
    #  - airflow.env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: 81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=
      AIRFLOW__WEBSERVER__SECRET_KEY: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    volumes:
      - ./Airflow/jobs:/opt/airflow/jobs
      - ./Airflow/dags:/opt/airflow/dags
      - ./Airflow/airflow_logs:/opt/airflow/logs
      - ./Airflow/spark_jars:/spark_jars
    depends_on:
      - airflow-postgres

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - '29092:29092'
      - "9092:9092"
      - "9101:9101"
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'http://kafka-connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # debezium:
  #   image: debezium/connect:2.5.3.Final
  #   container_name: debezium
  #   hostname: debezium
  #   build:
  #     context: ./cdc
  #   depends_on:
  #     #Skal v√¶re DB2 dependency
  #     #postgres:
  #     #  condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8093:8083"
  #     - "5006:5005"
  #   links:
  #     - kafka
  #   environment:
  #     BOOTSTRAP_SERVERS: kafka:29092
  #     CONNECT_REST_ADVERTISED_HOST_NAME: debezium
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: connect_configs
  #     CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     STATUS_STORAGE_TOPIC: connect_statuses
  #     STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     OFFSET_STORAGE_TOPIC: connect_offsets
  #     OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     ENABLE_DEBEZIUM_SCRIPTING: 'true'
  #     CONFIG_STORAGE_FILE: "/config/postgres_connector.json"
  #     CONNECT_PLUGIN_PATH: "/kafka/connect"
  #   volumes:
  #     - ./cdc/postgres_connector.json:/config/postgres_connector.json
  #     - ./confluentinc-kafka-connect-ibmmq:/kafka/connect/
  #   healthcheck:  
  #     test:
  #       [ 'CMD', 'curl', '--silent', '--fail', '-X', 'GET', 'http://localhost:8083/connectors', ]
  #     start_period: 10s
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_SCHEMA_PROVIDERS_AVRO_VALIDATE_DEFAULTS: "true"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: connect
    hostname: connect
    restart: always
    depends_on:
      - kafka
      - ibmmq
      - ibmdb2
    links:
      - kafka
    ports:
      - "5005:5005"
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_CLIENT_ID: "connect-adminclient-producer"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_TOPIC_CREATION_ENABLE: 'true'
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components/
    volumes:
      - ./custom_connectors/:/usr/share/confluent-hub-components/
      #- ./confluentinc-kafka-connect-jdbc:/usr/share/confluent-hub-components/
      #- ./wmq/JavaSE/lib/jms.jar:/usr/share/confluent-hub-components/confluentinc-kafka-connect-ibmmq/lib/jms.jar

  ibmdb2:
    image: ibmcom/db2:11.5.6.0
    hostname: ibmdb2
    container_name: ibmdb2
    privileged: true
    ports:
      - "50000:50000"
      - "25010:25010"
    environment:
      LICENSE: accept
      DB2INSTANCE: db2inst1
      DB2INST1_PASSWORD: passw0rd
      DBNAME: testdb
      ARCHIVE_LOGS: "false"
      SAMPLEDB: "false"
    volumes:
      - ./db2_config:/home/db2inst1/config
    #entrypoint: /home/db2inst1/config/entrypoint.sh
    #command: db2init
  
  airflow-postgres:
    image: postgres:14.0
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  ibmmq:
    image: ibmcom/mq:latest
    ports:
      - "1414:1414"
      - "9443:9443"
     # For monitoring prometheus metrics
     # - "9157:9157"
    environment:
      LICENSE: accept
      MQ_QMGR_NAME: QM1
      MQ_ENABLE_METRICS: 'true'
      MQ_ENABLE_EMBEDDED_WEB_SERVER: 'true'
      MQ_ADMIN_PASSWORD: passw0rd
      MQ_APP_PASSWORD: passw0rd
      MQ_APP_USER: app
      MQ_ADMIN_USER: admin
    volumes:
      - ./ibmmq-data/config.mqsc:/etc/mqm/config.mqsc

  spark-master:
    <<: *spark-common
    #image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    hostname: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    #volumes:
    #- ./Airflow/jobs:/opt/bitnami/spark/jobs
    #- ./Airflow/spark_jars/db2jcc4.jar:/spark/jars/db2jcc4.jar
    #- ./Airflow/spark_jars/db2jcc-db2jcc4.jar:/spark/jars/db2jcc-db2jcc4.jar
    #environment:
    #  INIT_DAEMON_STEP: setup_spark

  spark-worker:
    <<: *spark-common
    #image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker
    hostname: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    #volumes:
    #- ./Airflow/jobs:/opt/bitnami/spark/jobs
    #- ./Airflow/spark_jars/db2jcc4.jar:/spark/jars/db2jcc4.jar
    #- ./Airflow/spark_jars/db2jcc-db2jcc4.jar:/spark/jars/db2jcc-db2jcc4.jar
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
  
  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      - scheduler
      - airflow-postgres

  scheduler:
    <<: *airflow-common
    depends_on:
      - airflow-postgres
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname theis --lastname tengs --role Admin --email test@gmail.com --password admin && airflow scheduler"

  triggerer:
    <<: *airflow-common
    command: triggerer
    depends_on:
      - scheduler
      - airflow-postgres
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

# For future work
# https://github.com/vdesabou/kafka-docker-playground/tree/master/environment/plaintext/grafana

networks:
  default:
    name: test_network
    attachable: true