Transcribed Interview from Manager.

The Speaker 1 is me and Speaker 2 is the developer.

00:00:00 Speaker 1

Would like to start by saying that you have. Plenty of opportunity to be able to demand to be anonymous throughout the whole thing, if it is.

00:00:17 Speaker 1 

So you just have to say that, It can be both now or later.

00:00:20 Speaker 1 

The interview itself as I tried to explain before. It's that I have some questions um, you should be free to talk as much into it or around them. Then I'll probably stop you if it goes too far from that. Many of the questions are also open-ended so that you have the opportunity to be able to, yes, get to the bottom of it all, as that will also be what I need it for.

00:00:42 Speaker 1 

You just have to answer what you can and what you want to answer about.

00:00:47 Speaker 1 

As I said before, I will use it for my thesis to be able to know a little more about this, so I also know what to ask at another time. Yes.

00:00:57 Speaker 1 

Do you have any questions?

00:00:59 Speaker 2

Nah

00:01:00 Speaker 1 

Well, I'm wondering if you might just want to start by explaining a little about yourself and your background.

00:01:12 Speaker 2 

Yes. Well, my name is Bjarne Beck, I have been on bank data since. 90' I think.

00:01:14 Speaker 2 

And actually kept me busy. Broad with everything you could call core banking. 

Um and pretty much every discipline from coding myself, being a project manager, I've been various architect roles. From application architect to lead architect.

00:01:40 Speaker 2 

Yes, I have been involved in the strategic initiative around move to cloud for example and the like.

Yes, such a broad broad background.

00:01:53 Speaker 1 

Can you explain a bit about, now you yourself mentioned core banking, uh, in banking data terms what it actually is?

00:01:59 Speaker 2 

Well, it's customer administration, everything about accounts including interest fees and so on. Oh some payment system, we are about to be a few years behind in time.

00:02:25 Speaker 1 

What's it called? What is your position now? In the company where is it now?

00:02:39 Speaker 2

well now my position is called me lead consultant, but in practice I am the project manager for the conversion project we are running right now.

So I sit in the team that has to do with conversion and GDPR. And was brought here as part of a generational change, because Ours. Many years master conversion has programmed. He is retiring.

00:02:57 Speaker 1 

So how long have you been working with COBOL and batch in that sense?

00:03:04 Speaker 2 

Well, that. So his on COBOL has It has been on-off from day one and it also still happens that I sneak in. And code a program or 2. Just because I really love the craft.

But otherwise it has been strongly dependent on the role and where you were in the project process and the like, I have had a lot. What to say? Yes, an architect trolls a superior,
What to say? Objectives, overall responsible for, uh, the business solution in the projects I have completed.

And that hasn't always meant anything. It hasn't always involved a lot of hands on, but I've been close to it and sometimes there are things that are so complicated that they are almost impossible to describe, so sometimes it's easier to code them yourself.

00:04:06 Speaker 1 

At least it makes good sense.

Yes, so to put it a bit like you say even now that it's not much COBOL you tinker with now.

But it's more again, just like you say that if your work task has come out that it might end up being too complicated that you have to explain to someone else to do it, then it's faster and easier to do it self.

00:04:32 Speaker 2 

Jaer

00:04:33 Speaker 1 

And it will most of all be in batch programs, if it had to be, or would it also normally be other COBOL programs?

00:04:40 Speaker 2 

So PT is the most batch-oriented, yes, but uh, that has also been the case. Others

Speaker 1

okay. 

00:04:50 Speaker 2 

One can have a fascinating debate about when something is batch. Is it something that stands and listens to a MQ  batch or is it? Yes.

00:05:01 Speaker 1 

We can talk about that a little later. How do you work with COBOL now?

If you were to do it?

It is So little in terms of systems you use to work with it.

00:05:21 Speaker 2 

Well, there I am a traditionalist because I use, I use it too rarely for it to have made sense for me to take.

And put the new development tools into use, so I think if I had, if that had been my main job now.
So then I would probably have been running on it.

00:05:36 Speaker 1 

Yes and with new development which do you mean the VSCode solution?

Speaker 2

And

Speaker 1

So you stick more to 3270 and Is it "box" you also call it sometimes, just to have the whole terminology with

00:05:47 Speaker 2 

Exactly.

00:05:56 Speaker 1 

Um, yes, Now if you were to explain batch.
And It can be in both, it As you explained before, there can be many different ways and that. But maybe if you were to try to explain the most typical batch program, uh, To me now With a technical background, but if I didn't really understand it, or what else Was in the whole solution, how would you like maybe explain it now with a view to both Such a technology and in use together with it and.

00:06:27 Speaker 2 

But I think I would start with the purpose of the typical batch program. and, and basically it falls in 2 categories for me to see at least now. In the past there was a third category that was more at play, but I think. 2 significant categories this that that.Periodic events. 

In other words, something that must take place at certain times. And in larger quantities, and which you can't just do depending on me doing it when the 1 user needs to see it or something. An example of that could be something like interest attribution, because there is some legislation that hangs on the back of that and says that.
If you want a deduction for your interest, then it must be attributed in the right year and so on. So, so many banks have, for example, some interest attribution, at the end of the year, and if it doesn't work at the end of the year, then you get a whole lot of problems with, yes, law and business actually on the back end of it. It's such a classic thing, and also a great many of the things that could also be fees, or it could be collection of installments or anything else, which is like an agreement with the customer.

That it is not When it suits us or what to say. But but but on very specific dates. Um that's So one category of them, another category is What I would call.

What to say firm firm freezing of. Of certain statuses in relation to reporting and everything else we have, we need to get what we think frozen. The condition was typical at the turn of the day.

And of course you can do that. Lots of other ways than batch too, if you, if you arrange your data model according to that, but in our reality. Right now, this typically happens via batch processes that extract and freeze a basis that says This is how the customer looked at this 24-hour shift, This is what your balance looked like and everything else, which is like the basis for We have a common image of. This was the world.

00:08:50 Speaker 1 

Erm, Now you mention that with Yes it could be. Yes, the thing with Such freezing of different data, different customers and then having it moved over. It would then be such an input output from it. Like the program, there will perhaps be data from some tables that could be processed and put into another table of some kind

00:09:11 Speaker 2 

Yes, also something that really just stays, everything is not re-represented in a table structure and something is really just extracted and stored as data files.

00:09:22 Speaker 1 

OK. 

00:09:25 Speaker 2 

Because we don't always need those snapshots, you can say over a longer period than that we can just have them lying around in data extraction.

00:09:41 Speaker 1 

Yes, are there any, what other technologies do you use in, if you had to say, Such a pipeline, on some of these batch processing types?

00:09:52 Speaker 2 

And overall, you can say that everything in that world is orchestrated by OPC or it's called some Tivoli. It was called OPC in the good old days, which is the settlement management tool, which is like what ensures that things run when they need to run and things run in that order. It must run, i.e. can manage dependencies and run dates and everything else.

00:10:21 Speaker 1 

You said OPC?

Speaker 2

Yes, and if you google it, it's called something else. Today. But you can find it. I can't remember what it's actually called.

That's how you can say it. Such an orchestration tool we saw, so I don't have to go and remember when I ordered something to run on the third weekend of every month. Well, that's where you register it and then mourn. The one that basically happens.

00:10:54 Speaker 2 

Yes, and it, it, it starts so many different programs which, if it's the first ones we're talking about, like interest attribution or something, then it's typically up-to-date.
Actually, the large amount investigates what is to be attributed today and then actually chews through and makes sure that all those who should have attributed interest are given attributed interest.

For example.
And correspondingly in the more snapshot-like things. Well, it also starts at a well-defined time, which you typically have. After all, it is such a huge matrix of things that run through the night with controlled dependencies to each other very much. And then you try to find the point where you can say I'm done with yesterday. I haven't started today, so this is my 24-hour status change.

And it sounds more trivial than that. It is not. It's not super simple.
Yes, and they want to, they will typically just extract some current data and freeze it and say this. It is Our condition.

00:12:02 Speaker 1 

Now you mention it's not super simple, why?

00:12:06 Speaker 2 

That's because a lot of systems make a living. Has large real-time elements too, and you can say when when something is yesterday when something is today, you can say on.

And in some systems, they have gone to great lengths to be able to differentiate a little. This applies to such things as. Accounting for example because It is there, There are again some legislative things, you have to know when is the official accounting date on this and that, You can't just do it like.

The time It is posted on, again. Could you have any legislation to stay in the same example. For example, if the interest attribution at the end of the year was delayed.

If it's not still booked as 2023, now we get to the end of this year, but then you're out again, you won't get the interest deduction for that and everything else. You have not complied with your agreements with the customer and your continued calculation will be incorrect. In other words, there is really, really much in it, so actually defining when is when It's like that on a more logical level than just looking at the clock and that now we've changed a day, at least in many systems. Other systems have So a little more if It's more, what to say?

Master data like a customer typically is, well, it's really more just to say, now it's now and just say what was before It was yesterday what's after It's tomorrow.

00:13:37 Speaker 1 

Yes, to stay a bit again, maybe in the technology talk now here now you mentioned. Even this OPC to orchestrate it. In what way does it work together with, for example, this z/OS, which we also talked about before.?

00:13:56 Speaker 2 

After all, z/OS is really just an operating system. You can compare that to Windows on a PC, one might say, and OPC is actually a large central application.

00:14:06 Speaker 1 

Which runs on z/OS?

00:14:07 Speaker 2 

Which runs on z/OS and thus everything on the mainframe runs on z/OS. Basically.

Yes in practice. so so It's just an application that runs on z/OS and which actually stands and orchestrates and starts up a whole lot of other applications so that it initiates. Of course, it can be both what are the COBOL programs that are executed? It could be, it could also be database utilities, or it could be java z/OS programs that are being started so so It's really just such an orchestration thing, it can actually start anything. and has all sorts of facilities that enable it to start on time, or it can start when a them to wake up and say, well, but then I have to do Like this Or it can stand and listen to an MQ or yes, There are many yes.

00:15:10 Speaker 1 

Going back to now, you said before that basically the mainframe runs on z/OS, what are alternatives to that? Or you sound like there were some other options?

00:15:26 Speaker 2 
Yes, but the mainframe has developed a lot. In reality, you can spin.
After all, you can run containerized applications. I think that's how we could run Kubernetes cluster on the mainframe if we think that's what we wanted.

for example

00:15:39 Speaker 1 

It was just that
Then you also mentioned it here with, for example, then again if it is OPC that is running and. Waiting to hear for example as I understand it. It could also buy these So little triggers in different places about It was an MQ. Or if It was Yes, updating files maybe.

What kinds of MQs are they? E.g.

00:16:06 Speaker 2 

Well, in practice, it is IBM's MQ that we use.

00:16:12 Speaker 1 

Do you use different ones other than that, right?

00:16:15 Speaker 2
i.e. the decentralized platform also has MQ instances. I'm not super sharp with them, but.

00:16:21 Speaker 1 

No, but when it's down to COBOL and batch, would it be IBM MQ for the most part?

Speaker 2

and

00:16:29 Speaker 1 

You also mentioned this Java Z/OS, can. You explain a little about what you know about it.

00:16:34 Speaker 2 

Well, it's really just like the mainframe supports COBOL, so you can also code on the mainframe in all sorts of other languages ​​PL1 and java and so on and we also actually have quite a few applications that run java on Z/OS.

It is the platform like Sådan that has a somewhat strange fate, because somewhere it is stranded and has been given the status of not being a strategic platform. But the reality is that.

00:17:07 Speaker 2 

Some of our very critical client's deliveries run on it. This fight completely fight project that was with Vores. The new market platform it integrates with. Bankday, i.e. with bookkeeping and everything else, in, through Java z/OS. So it's a bit of a paradox that we have so much critical work on it, at the same time that.

00:17:34 Speaker 2 

That Java z/OS actually has a status of non-strategic.

00:17:39 Speaker 1 

OK. 

00:17:40 Speaker 2 

One can well wonder about that during a quiet moment.

And we also have quite a few others, so what really drove the adoption is that java is of course out of the box. Obviously handled to handle XML and JSON and so on like COBOL, at least for the XML part. Not in the same way have achieved, and compared to JSON got later I would say.

 So that was kind of what drove the deployment of it. Yes, it actually just PT also has the added benefit that when you run java z/OS, and that is because IBM would like to have pushed it in reality. Then it runs on a different processor type, which is settled at a different price, so in reality you can say if we, if we do something in COBOL.

And executes and does something, java z/OS in the same task and given it takes the same resources. Then it is actually cheaper to do it. java z/OS

00:18:44 Speaker 1

Okay. 

00:18:46 Speaker 2 

The assumption is that if we get really happy about moving a lot of load over, we will probably change the pricing.

00:18:51 Speaker 1 

It is of course also that
But of course also a discussion. Maybe in what?
Do they run at the same speed in both java z/OS and or if it is COBOL. If you say purely in terms of performance, whether it will end up anyway. Actually cost the same

Speaker 2

exactly.

Speaker 1

It might also be another question,

Speaker 2
and This has not been cultivated much, because today they typically solve 2 different tasks. It is very much where we use Java z/OS very much in Such an integration layer.

to take advantage of java's Advantages in That you can say yes yes.

00:19:26 Speaker 1 

Yes, a bit like that, perhaps the link to me from java programs that also run otherwise at bank data.

00:19:32 Speaker 2 

Yes, but also to external parties. If you, if you have agreed that you communicate in an XML format or in some JSON you stand and so on.
It's not XML, at least it's not particularly so. I would call it the natural format of COBOL. It is not super comfortable with it.
JSON is better, but but but clearly better still supported.

00:20:02 Speaker 1 

Then I think we'll move on a little bitt else.

00:20:07 Speaker 1 

And then we talked a little about the different types of batch programs there are. Can you think of a Such, Perhaps an example of a typical Such very typical program running now that you may have some familiarity with.

00:20:28 Speaker 2 

How the hell do you define a typical program?

00:20:33 Speaker 1 

Yes, yes, maybe one. It might be one that isn't that big, let's say a simple one instead of a simpler batch program

Speaker 2

but it could typically be some of those who do snapshot-like things.

Speaker 1
Yes, do you have a more specific Such? You can think of? Maybe they are making these snapshots
Speaker 2

At least I can find that. I don't remember it off the top of my head, but there are some 1000 to choose from.

00:21:05 Speaker 1 

Yes, and It was them where it was both now you said snapshots that could deal with this problem with when do you go over the day or these times? But there are probably also, there are also some of them who drive several times. Around the clock or

00:21:17 Speaker 2 

yes, there are plenty who do yes. Because this periodic task solution can also be. It's like that on the edge on the edge of the categories we started with, but there is also something you adopt, this. I check that every quarter. Sometimes, because it is judged that it is too expensive to do it in the transaction that might create change. And then you periodically investigate the effect of something.

And they can drive. Quite frequently. Yes, yes.

00:21:56 Speaker 1 

Now you said. Again, that there were thousands of them. Examples of it. But maybe you have one?

00:22:05 Speaker 2 

Such an approximation of when you are talking about these batch programs, and we are talking about the amount of data that usually runs through them. If we are talking either megabytes per second, or if we are talking, if we said file types per se, and the terabyte that you are up and talking or is it more or less or

Speaker 2

that again. Incredibly different, but you can, you can say, It is, of course. But but Snapchat things like this can be anything from you freezing customer types which is nothing for the entire customer to the entire population of customers which is a little more data or or you can have a batch process that takes. In other words, I post all postings on a bookkeeping day, which is quite a few millions on big bookkeeping days, and thus it is very, very different and processing time is also from seconds on some of those things to hours.

00:23:17 Speaker 1 

Yes, you don't have anything like that. Immediately Such an offer, even if we are talking about the big ones or something like that, if you say so. So when in Siger really large amounts of data. Like, what is it really?

00:23:29 Speaker 2 

And man, but it depends on what is the amount of data it processes along the way or is it the amount of data it outputs or is it yes.

00:23:35 Speaker 1 

Do you, do you even now? So on both, for example, if That should be it examples.

00:23:42 Speaker 2 

Not one where we have really counted on the amount of data in that way. Actually

Speaker 1

OK

00:23:51 Speaker 2 

but I can find some relatively large ones. So that makes large output, for example yes.

00:23:59 Speaker 1 

Yes, but It's something in like you have that data, like not, you can find if it is or Something like that. Can see

00:24:04 Speaker 2 

You can.

00:24:09 Speaker 1 

In addition to actually some of this batch processing, you also run and and even though they have these that, like triggers, maybe several times a day, also have something that runs, maybe either a combination or runs in something like that? What is real-time processing? next to perhaps or concurrently with something batch like some real time processing.

00:24:31 Speaker 2 

So I would say that the vast majority of what happens on the mainframe happens in real time. Yes, so all support for what happens in your mobile bank in your online bank and everything else is spinning in real time. Typical throughout CICS .

Speaker 1

can you explain a bit what biscuits are?

Speaker 2

CICS is such a transaction server which is really good at handling the scope around a transaction, a real-time transaction you start for some interface and then just like keeping context around the transaction ensures transactional scope. Which is one of those maturity parameters. I say I miss because, before we really start looking at alternatives, which, for example, ensure that regardless of where I am in my transaction, if I find out along the way that this is going wrong, I don't have to as a programmer down here thinking, how did I get rid of all the other stuff that had happened before? Like it can. It can also arrange to undo the entire transaction. We were on the way on the way in.

Yes and It's really CICS has a lot, i.e. It's a huge topic, but It's the deepest, i.e. transaction server completely overall and has. Yes, a very old product you could say, and thus also a super mature product, which does a lot to encapsulate the transaction and ensure that you cannot disturb each other and so on.

00:26:06 Speaker 1 

Maybe you can explain now you say? It's a very big topic, and it might be a conversation for another time, but if you could maybe in. More general terms, maybe a little Like this, from the outside, how CICS actually fits into this with mainframe and z/OS and these MQs we talked about before?

00:26:24 Speaker 2 

Well, CICS is, after all, CICS is actually another applicationtion Which runs on z/OS, and which actually supports that you can settle transactions into it, you could say. A bit like itself The DB2 is an application running on z/OS so it but. It is. Such large basic elements can be said to be in a mainframe installation.

00:26:49 Speaker 1 

I think that's nice.

Yes back to some of these again. Maybe more ways to work when you end up working with the batch programs or when you design new ones, perhaps for you and as an architect if you work with some requirements for both Such performance of it also when you develop.

Can be something like that with response times, up times or yes.

00:27:22 Speaker 2 

It's relatively rare that at least when we're talking the batch development part of it, it's rarely the response time like the response time, but resource efficiency is a huge thing because you're typically handling.
Large amounts, and that means, for example, things like how do you design your database access?

Do you have the necessary indexes. Makes a huge difference, and it's widely speculated. A lot in “..” and. What to say with? Sometimes processors are split up along the way to accommodate that ratio instead of just doing everything. At once, because some One can say, There are some things you shouldn't decompose, if they are like important to have.

Scope that it is done at once, then it must be done at once. But other things are irrelevant and you can sometimes get a big efficiency gain by decomposing it and maybe making sure you get your customer in a customer order and your accounts, an account order and so on.

00:28:33 Speaker 1 

Yes, so you said a lot Like with resources in, like maybe Like “..” the instance itself There uses. And that is perhaps again what we talked about with the payment on what it actually costs to run on the mainframe about it? Yes, it is in that major just as you are looking at.

00:28:48 Speaker 2 

Yes a lot and and you can also because one thing is the price, but in contrast to a cloud world where it is said that if you if you overconsume yes then you buy yourself from it. You can also do that on a mainframe, but that's a completely different story. It is a completely different pricing model, because at the peak of the year you will be penalized for the whole. The year, and therefore, in practice, you have put a ceiling on your mainframe access, which does, and if you bump up against it, well, then you just start fighting over the resources.

00:29:07 Speaker 1 

OK. 

00:29:19 Speaker 2 

And there are other big themes you can dive into if you think it was fun. I might not recommend that, but it is. There are some rules that state that you can have a little overdraft for a period of time, but not but only for a limited period. And if you've had it, then you suddenly become something called capped, so you become severely restricted on your consumption. Something like that, if you do it at night, our online systems start to be capped, so the users have a bad experience and So so it so so It's a lot in that major.

00:29:56 Speaker 1 

And now I say it like being capped. Or what is it called? The consumption you have? What is it then? What would it be Consumption of?

Speaker 2

These are CPU resources. Yes, that's typically what is speculated about, of course, of course you don't overconsume. Disk space and so on, but It is not. This is not typically what is speculated about?

00:30:18 Speaker 1 

No. Is it also something like? Well, maybe That's what someone now says in CICS. Thus, it is transactions in all that way through or perhaps such calls to your DB 2 instances.

00:30:31 Speaker 2 

CICS is basically not batch, you could say. It's just some real-time transaction stuff, but typically stays. I would say most times you see overuse of cpu resources, it is in connection with database access. Because It's like there you DB 2 is kind. So if you ask something, it will do whatever it takes to answer, it won't come out and say it would be great if you had a little more information or that is what it does, what it what what it needs if it thinks it can answer and sometimes it may well be a strong inappropriate access because you just told it too little in relation to the index and everything else you have, you have given and It is typically something that goes out.

If it is poorly made, then you can say yes.

00:31:22 Speaker 1 

Are there any tools for, like, keeping an eye on those metrics. On your batch program?

00:31:30 Speaker 2 

Yes, it does. And you can say, in that way, you can say that you, you can also say that you are a bit spoiled in a mainframe world in reality, because you can say something like.

 As I can hear Our platform 2 0 teams work very hard to build their own metrics and have them monitored, a lot of this is actually centrally monitored.

And if something suddenly goes wrong. Then you really just get a message that there is something you need to look at. And in your development process. Well, there is plenty of opportunity to see. What is the actual consumption on this?

00:32:11 Speaker 1 

Yes, when you say for example knocks out, then. Could it be cpu consumption?

Speaker 2

It could be cpu consumption or that the processing time is suddenly greatly increased or something like that.

00:32:20 Speaker 1 

And that gives the opportunity to At, just as you can be used to look. On the specific yes programs.

00:32:27 Speaker 2 

Yes, central because that It is so that it affects widely, you can say It is, after all, This is the thing with the fact that we use the same resource pool and therefore if I overconsume violently, then it affects some others. In the end, it affects some customers who do not get the experience they want. So we have a central someone who keeps an eye on whether things improve over time or suddenly take on a different behavior and like what to say?

You can't say they have the right to serve, because you have to take care of that yourself. But but but you get a notification pretty quickly saying I think you have a problem fish face yes.

00:33:12 Speaker 1 

Perhaps the quick example of what kinds of other programs use the result of what are these batch programs called? It could then be, for example, another batch, but it could also be. Do you have any examples of that?

00:33:28 Speaker 2 

Well, quite a bit, typically those snapshot things. They stay too. Typically shipped in
So our landing zone for further processing in some SAAS, if we're talking about some of the periodically updated things, well, they're actually just included in the updated pool, so basically all your online transactions and everything else is there too. And doesn't use it like the direct result, but just because your that your data is up to date. Can you say.

But otherwise the flow is great. So that's how it is directly. Flow between programs is a lot from batch program to batch program or out in a SAAS world or maybe the batch program triggers something MQ which triggers something else out there.

And it could. And the next batch program could well be something that is written somewhere else. It could be a clearing delivery we had to get rid of that we send out or something like that.

00:34:26 Speaker 1 

What is it? If you were to put it in. Your words, what is it that you think might make COBOL a good choice in terms of using it for batch processing?

00:34:42 Speaker 2 

So COBOL is an excellent choice for most financial applications. Code assignments I would say. But I don't really think. So for me. For me, even if it's COBOL or another tool, I don't think it's super interesting. I I think It's an interesting debate. In my opinion, maybe more mainframe or not

Speaker 1

and.

00:35:09 Speaker 2 

And the 2 things are not necessarily connected.

00:35:14 Speaker 1 

I should ask in a different way, so why do you think that maybe or think that mainframe is good for batch?

00:35:24 Speaker 2 

Well I mean and I mean the mainframe is good. I want to say the broader I mean, the mainframe is really good for financial IT on many points, among other things because we have this broad transactional scope. We know it's really sharp to handle.

If things fail that you can restart well defined and. So in general, just a maturity which means that you know that you are on safe ground when you have to navigate it.

A good a good monitoring, a good that is as we talked about before. Orchestration solution. So this OPC facility.

00:36:15 Speaker 1 

We have talked a little before as well. The data that comes in. We are talking about that, I could be from DB 2 or it could be files and if we were talking about these files where?

That, It's just such plain. Text files or how they are formatted.

00:36:34 Speaker 2 

Yes, it's not a text file as you know it from a PC, but it's but but basically it's the same. It's just typical instead of having a UTF-8 or an ascii format, it's that typical oneCPI format on the mainframe, but It's just a character set.

00:37:00 Speaker 1 

If we move on to maybe more. Something about what you think about this thing of having to try to get away from the mainframe. Are there any things that you mean by the current solution between mainframe and batch? At least batch on the mainframe as you could see?
That which is better or being improved.

00:37:24 Speaker 2 

So I think I think. There are many batch processes on the mainframe that could easily be moved to another platform. Paradoxically, I am thus more concerned about a series of real-time. Is a series of real-time loads compared to it.

But it could.

00:37:44 Speaker 1 

You say in that sense more So you are nervous about how the CICS will work away from or?

00:37:51 Speaker 2

In any case, and it really isn't. It's not just a platform thing, but also because when we think of alternatives, we think very much of a microservice architecture. Simple as that. Now I do a fund's trading out in the real world. After all, there is something about me having to communicate with VP. I must have posted. I need to have updated my own inventory on the customer, and I probably also need to have it logged and so on and so forth. A lot of those things like. At least, the way we see the world right now. Enough lives in 1, 6, 7, 8 microservices. And there I get this problem that when microservice number 7 fails, I can live with eventual consistency.

Which we are not quite sharp yet either, and in a number of cases you will not be able to in financial IT.We will not have given the customer securities without getting him settled, because then he can dispose twice for a period, so it's out in a lot of patterns about how do you handle this? And you should be able to make compensating transactions, and We haven't dealt with that at all. So we haven't even got the pattern for it, so for me there is a long way to go before you have a foundation where you can seriously start attacking it.

So I think. In other words, all possible query loads. We can remove super fine. It is more than abundantly ripe for that, but there are some of them, what can one say? The critical updating functions where I. In my view, at least we don't have maturity. On the solutions that make us ready to move out of the mainframe. But in terms of batch you could easily. So especially on.
Um especially on some of that snapshot stuff. It could basically stand anywhere and ensure that the snapshot is extracted. One of the challenges, there is the possibility of orchestration in relation to the rest of the world, because it is not one o'clock or another. It's when this has happened, and this has happened, and this has happened. And there we get a long transition period. This need for orchestration across platforms, which we also need. Have found the good solution for.

00:40:20 Speaker 1 

Yes. Again, if we talk about the performance criteria we talked about before, there are some of them you. And as with your architectural background, maybe you wish you could too, or at least you do. What is it called focused more on as well, or like took more into account when you also designed and made your programs for both batch, or maybe even also for real-time?

00:40:55 Speaker 2 

So I think, It is always healthy to consider what kind of system you are making, you can say and, and therefore I do not think that there is one solution that fits everything. It is important if you do. Critical systems with high transaction volumes, and Low fault tolerance or if or if you do something that has. Much lower frequency and perhaps also a different tolerance for variance in response time and. So I'm actually thinking about choosing them, choose your design and your and your tool according to what kind of task you have to solve. That's the way it is seen. What to say common sense basically, but not always what happens because like everywhere else, everything always looks like a nail to the person who only has a Hammer, so it becomes very easy to use it you. Caring regardless of whether it might not be. Good choices for the task.

But otherwise, I would say, if you were to talk about alternatives to some batch, then it is necessary, then an alternative to some batch could be not to have It yes. In other words, it may be that your data model is different, so for example a snapshot is not something you need to. Have frozen, because you can really always just decide that your data model reflects. What was the status?

By having time dimensions in all data or something. Yes There is a pretty long journey to get there, but it's not something you do overnight, but you can start to think about it, if if That's the way we see the future.

00:42:36 Speaker 1 

Okay. If we were to try to jump into this, we have also touched on a bit. But with this. COBOL in itself, which is often at least what is being mentioned here also now in conjunction with this with out and mainframe in 2040. Then it didn't seem to you that you are perhaps particularly interested in that one. Necessarily must go out and COBOL.

00:43:02 Speaker 2 

So, I feel a little bit. I was educated in 1990, I think. At the time, we talked about the fact that no one was trained as a cobol programmer back then. And that's a big problem, because in 14 days there won't be anyone who can code COBOL, 33 years later. So there are lots of people who know COBOL and I think. I kind of agree with It is that there is a recruitment challenge. I think In this way, we help to create it ourselves in the way we articulate it because because it is, as it were, made into something. Old Norse in fact. I think if you look at a modern. A modern IDE for creating COBOL. Maybe and I admit that the mainframe's crude user interface. It will seem quite foreign to most people coming out of the school day. I can say that. It also did that in the 90s. It didn't really resemble what I had seen when I arrived.

But I really think, It's much more interesting than whether it's cobol or java or .NET or whatever. I believe much more, that is, in reality, I believe that the After the first ones. 3 years, where you mostly where you mostly are IT because you think coding is fun, my experience is in reality that for most people it changes to the fact that they are in it for the difference you make with what you do and it becomes less important.

No matter what the tool or, Or programming language or and. After all, 90% of the skills across the programming language are the same. And of course we have a challenge, you can say, We have, if you want something else, we have a rather serious portfolio of COBOL programs. Yes, and that, and that we will. To relate to. Us to so so I think we come. After all, we are going to deal with whether we want to continue to articulate It as a problem.

Because if none of the young people we are recruiting now come to. Coding COBOL.

Yes, then we will have a serious challenge, because my calculator cannot get those strategic perspectives. It says that we out of mainframe 2040 to. So my calculator can't calculate it at home

I can say that I was involved in a strategic project around the turn of the millennium. As knowDOWNthe project, where you made a book entry, new interest, a new fee and everything else. After all, it cost 225 million kroner back then. And and my claim will be that it will be, even if you index that price, it will not be cheaper to try to do it in one on another platform now. And then you can just take if you take that amount and just distribute from now to 40. And then go out and ask, the banks are willing for that part, and It's still only. Maybe 1/4 of what drives on technical roads. Say, are you willing to throw away 30 million a year Get it rescheduled. Not because you necessarily get something new, but just to get it rearranged.

I think it will be. I think it will be uphill, and there are many out there in connection with this move to cloud After all, there were all kinds of people. We reached out to various to get perspectives on it. There are people out there who can. MakeRIGHTso take COBOL and turn it into Java code.

Something that can be interpreted as java, but it's not java code, because it's basically just. So a Java programmer would find it difficult indeed. But It's not COBOL.

But then you can say. Did we move something or did you just make it worse? If you almost have to have a COBOL mindset to be able to read the java program that.

00:47:20 Speaker 1 

Yes, but it would be some of them. Something similar. At least that is what was needed, because if you say at least that It is one. This whole thing about having to get away from the mainframe in 2040, maybe not necessarily away from COBOL, but it will be away from the mainframe, because it's like you're afraid of it, that you don't go down with the ship with them.

00:47:38 Speaker 2 

Yes I think. Yes

00:47:43 Speaker 1 

so maybe it is. In a way easier to sell. For the banks to say. 30 million a year to make me rewrite this or 40 million a year for us not to and We have to pay IBM to keep us on Mainframe in a way I could. It could perhaps also be part of the conversation, I think. It is.

00:48:02 Speaker 2 

Well, it's such a picture. Not really. If it is there, it is, it is. The problem is the day it is there, then we have a latency period before we are out. It really says many years and problem.
In practice, the challenge with that, is that everyone can agree on it in this way. What to say on the abstract level? But when they have to make the decision on next year's budget?

So actually getting them laid. And it is 30 million for us to reach it, so we also have someone sitting in Silkeborg. Someone sitting in the city street. After all, they would also like to achieve it, so that amount is significantly larger, so the matter of just getting them. To make the decision for next year.

It is really difficult because people would rather have something. There is so much IT where they can get the money back very quickly, so the thing about making a strategic investment that goes so far into the future that experience says just that. That It is really difficult.

00:48:58 Speaker 1 

Time is running out on us here at last. I might just have a question there. In other words, where you can talk as much about what you want. It could also just be perhaps the same keyword.

And it would just be again if, at this point in time, in the form of what we have talked about now, you should see me try to come up with an idea and investigate it with this solution, which could be an alternative to mainframe and COBOL anyway in this batch.

So, as we have talked about now, which necessarily may also have to look into this real-time processing. Is there something that you think now that I lack as knowledge, or that you at least know that could be quite important to. Also to look at.

00:49:46 Speaker 2 

So I believe it. It depends on whether your focus will be to get out and mainframe, or your focus will be to migrate some batch process for mainframe. Because if the focus is to get out of the mainframe. So I think. So then batch just a small part of it, then I think you are in and look at it then I think you should go in and grow. Some of those hard disciplines that we talked about getting. All an alternative to transactional scope. When can you live with eventual consistency, for example as a design pattern? And when can you not live with it? And what do we do in those cases?

To set up a real alternative for it, because that pain is there. We can postpone them, we can do a lot. After all, this is also what we primarily started with. It's a data exhibition, you could say, and it's super nice and personally I think we should do a lot more of it, because it makes super good sense.

But if you want to go out, that is, when it has to be black and white and you want to go out. Then there is the pain that must be taken at some point and say, well, those also completely raw updating things that are hyper critical and where eventual consistency is not good enough. What do we do with them?

And there is a lot where we can, where we can live with different data streaming solutions or other things with asynchronous decoupling and that sort of thing. But there. Are also some places where.

I can not see with current legislation and and current way. Our customers look at banking that there can be no time on earth as far as I can see, and the alternative is missing if you have to if you have to. Must draw a path.

And It can also, and the other alternative could be to say, and It's actually what I think at the start now with offloading all that. As a new platform is better for or at least as good for and so let's wait and see if something else doesn't mature. Let us begin to make ourselves that is to seek that maturity ourselves too. And that's why I think it's hard to draw. So it is difficult to draw a plan. I think you have to draw a direction and, as it were, attack it in this way. Not so.

00:51:56 Speaker 1 
 
Yes, it would be like it now says offload something the batch maybe. Will they yes There is something else.

00:52:02 Speaker 2 

It could also be the batch. It could also be a lot. All the requests, external api, calls and everything else that is. It says it says brilliantly and spins. Okay.



